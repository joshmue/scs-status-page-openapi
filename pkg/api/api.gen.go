// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Component defines model for Component.
type Component struct {
	AffectedBy  *[]Incident `json:"affectedBy,omitempty"`
	DisplayName *string     `json:"displayName,omitempty"`
	Id          *string     `json:"id,omitempty"`
	Labels      *Labels     `json:"labels,omitempty"`
}

// Incident defines model for Incident.
type Incident struct {
	Affects    *[]Component        `json:"affects,omitempty"`
	BeganAt    *time.Time          `json:"beganAt,omitempty"`
	EndedAt    *time.Time          `json:"endedAt"`
	Id         *string             `json:"id,omitempty"`
	ImpactType *IncidentImpactType `json:"impactType,omitempty"`
	Phase      *IncidentPhase      `json:"phase,omitempty"`
	Title      *string             `json:"title,omitempty"`
}

// IncidentImpactType defines model for IncidentImpactType.
type IncidentImpactType = string

// IncidentPhase defines model for IncidentPhase.
type IncidentPhase = string

// Labels defines model for Labels.
type Labels map[string]string

// GetIncidentsParams defines parameters for GetIncidents.
type GetIncidentsParams struct {
	// Start Start of time frame to query for (RFC3339)
	Start time.Time `form:"start" json:"start"`

	// End End of time frame to query for (RFC3339)
	End time.Time `form:"end" json:"end"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /components)
	GetComponents(ctx echo.Context) error

	// (GET /impacttypes)
	GetImpacttypes(ctx echo.Context) error
	// Get list of incidents
	// (GET /incidents)
	GetIncidents(ctx echo.Context, params GetIncidentsParams) error

	// (GET /phases)
	GetPhases(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetComponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetComponents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComponents(ctx)
	return err
}

// GetImpacttypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetImpacttypes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetImpacttypes(ctx)
	return err
}

// GetIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIncidentsParams
	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIncidents(ctx, params)
	return err
}

// GetPhases converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhases(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPhases(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/components", wrapper.GetComponents)
	router.GET(baseURL+"/impacttypes", wrapper.GetImpacttypes)
	router.GET(baseURL+"/incidents", wrapper.GetIncidents)
	router.GET(baseURL+"/phases", wrapper.GetPhases)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUQW/bPAz9Kwa/77ABXu01p+nWBdsQrNiCZbehB8aiExWypEp0AaPwfx8kJ/XSZpmH",
	"Djkllh7J98hHPUBlG2cNGQ4gHiBUW2ow/Z3vL+KH89aRZ0XpCuuaKib5votfiqlJx/97qkHAf8WYs9gl",
	"LBamUjIm63PgzhEIQO+xi99SBaex+4INxTS768BemU28V/LoscY16T8Wvh5Q/VjXrm+pSkQeSf1GYZgs",
	"b2zWEX1r2qC5SlVq6xtkECCR6Q2rhiB/royMJHkiwLRa41oTCPYt5ZM7phqHFX9Px9PGtRgj+hzcFsPk",
	"0GUCx3Yo1scGe2oiiwOmz4Qc1jiGuH40B0qpWFmDenkw4mchT8hEfsrUNmEHCbCar7IVI7chW+KGsqvl",
	"AnK4Jx+UNSDg7UUZM1lHBp0CAbOL8uIScnDI21S1ONy3DaUpR14YSS4kCPhEPB9ROXgKzpow0L4sy/hT",
	"WcM756JzWlUpvLgNkcd+j/+FfWMbJIXKK8eDyK+f42mfQzH4KeJPiln8AjuHmuPm/QtZu/jToh5Bcboe",
	"G2LyAcSPhyd5V4yeM1tncXmzOiIzttldS77LauuzV98+zmez2bvXEA0HAtJVXPP0IEKICVLj7lrlSe63",
	"fuzKlFelz58S+2DkS2iRkS8ndXNOP0x2QQ6hbRr03TDqTKuQJjgaI/kkPYcnTbIcEOcUOT670/wexZK/",
	"33u39RoEbJmdKAptK9RbG1jMyrKE/qb/GQAA///y61WxMAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
